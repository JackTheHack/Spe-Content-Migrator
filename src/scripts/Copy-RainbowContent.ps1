Import-Module -Name SPE -Force

function Copy-RainbowContent {
    [CmdletBinding(SupportsShouldProcess=$true)]
    param(
        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [pscustomobject]$SourceSession,

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [pscustomobject]$DestinationSession,

        [Parameter(Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$RootId,

        [switch]$Recurse,

        [ValidateSet("SkipExisting", "Overwrite", "CompareRevision")]
        [string]$CopyBehavior,

        [switch]$RemoveNotInSource,

        [switch]$ClearAllCaches,

        [switch]$CheckDependencies,

        [switch]$Detailed,

        [switch]$BoringMode
    )

    function Write-Message {
        param(
            [string]$Message,
            [System.ConsoleColor]$ForegroundColor = [System.ConsoleColor]::White,
            [switch]$Hide
        )

        $timeFormat = "HH:mm:ss:fff"
        if(!$Hide) {
            Write-Host "[$(Get-Date -Format $timeFormat)] $($Message)" -ForegroundColor $ForegroundColor
        }
    }

    function Get-SpecialText {
        param(
            [int]$Character,
            [string]$Fallback
        )
        if($BoringMode) {
            $Fallback
        } else {
            "$([char]::ConvertFromUtf32($Character))"
        }
    }

    if($WhatIfPreference) {
        Write-Message "[WhatIf] Following results will be in the WhatIf scenario" -ForegroundColor Yellow
    }
   
    $watch = [System.Diagnostics.Stopwatch]::StartNew()
    $recurseChildren = $Recurse.IsPresent
    $skipExisting = $CopyBehavior -eq "SkipExisting"
    $compareRevision = $CopyBehavior -eq "CompareRevision"
    $overwrite = $CopyBehavior -eq "Overwrite"
    $bulkCopy = $true

    $dependencyScript = {       
        $result = (Test-Path -Path "$($AppPath)\bin\Unicorn.dll") -and (Test-Path -Path "$($AppPath)\bin\Rainbow.dll")
        if($result) {
            $result = $result -band (@(Get-Command -Name "Import-RainbowItem").Count -gt 0)
        }

        $result
    }

    if($CheckDependencies) {
        Write-Message "[Check] Testing connection with remote servers" -ForegroundColor Green
        Write-Message "- Validating source $($SourceSession.Connection[0].BaseUri)"
        if(-not(Test-RemoteConnection -Session $SourceSession -Quiet)) {
            Write-Message " - Unable to connect to $($SourceSession.Connection[0].BaseUri)"
            return
        }
        Write-Message "- Validating destination $($DestinationSession.Connection[0].BaseUri)"
        if(-not(Test-RemoteConnection -Session $DestinationSession -Quiet)) {
            Write-Message " - Unable to connect to $($DestinationSession.Connection[0].BaseUri)"
            return
        }

        Write-Message "[Check] Verifying prerequisites are installed" -ForegroundColor Green
        $isReady = Invoke-RemoteScript -ScriptBlock $dependencyScript -Session $SourceSession

        if($isReady) {
            $isReady = Invoke-RemoteScript -ScriptBlock $dependencyScript -Session $DestinationSession
        }

        if(!$isReady) {
            Write-Message "- Missing required installation of Rainbow and Unicorn"
            return
        } else {
            Write-Message "- All systems are go!"
        }
    }

    if($bulkCopy) {
        $checkIsMediaScript = {
            $rootId = "{ROOT_ID}"
            $db = Get-Database -Name "master"
            $item = $db.GetItem($rootId)
            if($item) {
                $item.Paths.Path.StartsWith("/sitecore/media library/")
            } else {
                $false
            }
        }
        $checkIsMediaScript = [scriptblock]::Create($checkIsMediaScript.ToString().Replace("{ROOT_ID}", $RootId))
        $bulkCopy = !(Invoke-RemoteScript -ScriptBlock $checkIsMediaScript -Session $SourceSession)
    }

    Write-Message "[Running] Transfer from $($SourceSession.Connection[0].BaseUri) to $($DestinationSession.Connection[0].BaseUri)" -ForegroundColor Green
    Write-Message "[Options] RootId = $($RootId); Recurse = $($Recurse);"
    Write-Message "[Options] CopyBehavior = $($CopyBehavior); RemoveNotInSource = $($RemoveNotInSource);"

    $compareScript = {
        $rootId = "{ROOT_ID}"
        $recurseChildren = [bool]::Parse("{RECURSE_CHILDREN}")
        Import-Function -Name Invoke-SqlCommand
        $connection = [Sitecore.Configuration.Settings]::GetConnectionString("master")

        $revisionFieldId = "{8CDC337E-A112-42FB-BBB4-4143751E123F}"
        if($recurseChildren) {
            $query = "
                WITH [ContentQuery] AS (SELECT [ID], [Name], [ParentID] FROM [dbo].[Items] WHERE ID='$($rootId)' UNION ALL SELECT  i.[ID], i.[Name], i.[ParentID] FROM [dbo].[Items] i INNER JOIN [ContentQuery] ci ON ci.ID = i.[ParentID])
                SELECT cq.[ID], vf.[Value] AS [Revision], cq.[ParentID], vf.[Language] FROM [ContentQuery] cq INNER JOIN dbo.[VersionedFields] vf ON cq.[ID] = vf.[ItemId] WHERE vf.[FieldId] = '$($revisionFieldId)' AND vf.[Language] != '' AND vf.[Version] = (SELECT MAX(vf2.[Version]) FROM dbo.[VersionedFields] vf2 WHERE vf2.[ItemId] = cq.[Id])
            "
        } else {
            $query = "
                WITH [ContentQuery] AS (SELECT [ID], [Name], [ParentID] FROM [dbo].[Items] WHERE ID='$($rootId)')
                SELECT cq.[ID], vf.[Value] AS [Revision], cq.[ParentID], vf.[Language] FROM [ContentQuery] cq INNER JOIN dbo.[VersionedFields] vf ON cq.[ID] = vf.[ItemId] WHERE vf.[FieldId] = '$($revisionFieldId)' AND vf.[Language] != '' AND vf.[Version] = (SELECT MAX(vf2.[Version]) FROM dbo.[VersionedFields] vf2 WHERE vf2.[ItemId] = cq.[Id])
            "
        }
        $records = Invoke-SqlCommand -Connection $connection -Query $query
        if($records) {
            $itemIds = $records | ForEach-Object { "I:{$($_.ID)}+R:{$($_.Revision)}+P:{$($_.ParentID)}+L:$($_.Language)" }
            $itemIds -join "|"
        }
    }
    $compareScript = [scriptblock]::Create($compareScript.ToString().Replace("{ROOT_ID}", $RootId).Replace("{RECURSE_CHILDREN}", $recurseChildren))
    
    class ShallowItem {
        [string]$ItemId
        [string]$ParentId
    }

    class ShallowItemExtended : ShallowItem {
        [string]$RevisionId
        [string]$Language
        [string]$Key
    }

    Write-Message "- Querying item list from source"
    $s1 = [System.Diagnostics.Stopwatch]::StartNew()
    $sourceTree = [System.Collections.Generic.Dictionary[string,[System.Collections.Generic.List[ShallowItem]]]]([StringComparer]::OrdinalIgnoreCase)
    $sourceTree.Add($RootId, [System.Collections.Generic.List[ShallowItem]]@())
    $sourceRecordsString = Invoke-RemoteScript -Session $SourceSession -ScriptBlock $compareScript -Raw
    if([string]::IsNullOrEmpty($sourceRecordsString)) {
        Write-Message "- No items found in source"
        return
    }
    
    $sourceItemsHash = [System.Collections.Generic.HashSet[string]]([StringComparer]::OrdinalIgnoreCase)
    $sourceItemLanguageRevisionHash = [System.Collections.Generic.HashSet[string]]([StringComparer]::OrdinalIgnoreCase)
    $skipItemsHash = [System.Collections.Generic.HashSet[string]]([StringComparer]::OrdinalIgnoreCase)
    $RootParentId = ""
    foreach($sourceRecord in $sourceRecordsString.Split("|".ToCharArray(), [System.StringSplitOptions]::RemoveEmptyEntries)) {
        $shallowItem = [ShallowItem]@{
            "ItemId"=$sourceRecord.Substring(2,38)
            "ParentId"=$sourceRecord.Substring(84,38)
        }
        $shallowItemExtended = [ShallowItemExtended]@{
            "ItemId"=$sourceRecord.Substring(2,38)
            "RevisionId"=$sourceRecord.Substring(43,38)
            "ParentId"=$sourceRecord.Substring(84,38)
            "Language"=$sourceRecord.Substring(125, $sourceRecord.Length - 125)
            "Key"=$sourceRecord
        }
        if(!$sourceTree.ContainsKey($shallowItem.ItemId)) {
            $sourceTree[$shallowItem.ItemId] = [System.Collections.Generic.List[ShallowItem]]@()
        }

        $skipItemsHash.Add($shallowItem.ItemId) > $null
        if([string]::IsNullOrEmpty($RootParentId) -and $shallowItem.ItemId -eq $RootId) {
            $RootParentId = $shallowItem.ParentId
        }
        $sourceItemLanguageRevisionHash.Add($shallowItemExtended.Key) > $null

        $childCollection = $sourceTree[$shallowItem.ParentId]
        if(!$childCollection) {
            $childCollection = [System.Collections.Generic.List[ShallowItem]]@()
        }
        if(!$sourceItemsHash.Contains($shallowItem.ItemId)) {
            $sourceItemsHash.Add($shallowItem.ItemId) > $null       
            
            $childCollection.Add($shallowItem) > $null
        }
        
        $sourceTree[$shallowItem.ParentId] = $childCollection
    }
    $sourceItemsCount = $sourceItemsHash.Count
    $s1.Stop()
    Write-Message " - Found $($sourceItemsCount) item(s) in $($s1.ElapsedMilliseconds / 1000) seconds"

    $destinationItemsHash = [System.Collections.Generic.HashSet[string]]([StringComparer]::OrdinalIgnoreCase)
    $destinationItemLanguageRevisionHash = [System.Collections.Generic.HashSet[string]]([StringComparer]::OrdinalIgnoreCase)
    if(!$overwrite -or $RemoveNotInSource) {
        Write-Message "- Querying item list from destination"
        $d1 = [System.Diagnostics.Stopwatch]::StartNew()
        $destinationRecordsString = Invoke-RemoteScript -Session $DestinationSession -ScriptBlock $compareScript -Raw
        
        if(![string]::IsNullOrEmpty($destinationRecordsString)) {
            foreach($destinationRecord in $destinationRecordsString.Split("|".ToCharArray(), [System.StringSplitOptions]::RemoveEmptyEntries)) {
                $shallowItem = [ShallowItem]@{
                    "ItemId"=$destinationRecord.Substring(2,38)
                    "ParentId"=$destinationRecord.Substring(84,38)
                }
                $shallowItemExtended = [ShallowItemExtended]@{
                    "ItemId"=$destinationRecord.Substring(2,38)
                    "RevisionId"=$destinationRecord.Substring(43,38)
                    "ParentId"=$destinationRecord.Substring(84,38)
                    "Language"=$destinationRecord.Substring(125, $destinationRecord.Length - 125)
                    "Key"=$destinationRecord
                }

                if(!$destinationItemsHash.Contains($shallowItem.ItemId)) {
                    $destinationItemsHash.Add($shallowItem.ItemId) > $null            
                }
                $destinationItemLanguageRevisionHash.Add($shallowItemExtended.Key) > $null
            }
        }

        if($skipExisting) {
            $skipItemsHash.UnionWith($destinationItemsHash)
        } elseif($compareRevision) {
            $itemsToSkipHash = [System.Collections.Generic.HashSet[string]]([StringComparer]::OrdinalIgnoreCase)
            $itemsToSkipHash.UnionWith($sourceItemLanguageRevisionHash)
            $itemsToSkipHash.ExceptWith($destinationItemLanguageRevisionHash)
            if($itemsToSkipHash.Count -gt 0) {
                foreach($key in $itemsToSkipHash) {
                    $itemId = $key.Split(":")[0]
                    $skipItemsHash.Remove($itemId) > $null
                }
            }
        }

        $destinationShallowItemsCount = $destinationItemsHash.Count
        $d1.Stop()
        Write-Message " - Found $($destinationShallowItemsCount) item(s) in $($d1.ElapsedMilliseconds / 1000) seconds"
    }

    if($overwrite) {
        $skipItemsHash.Clear()
    }

    $pullCounter = 0
    $pushCounter = 0
    $errorCounter = 0
    $updateCounter = 0
    
    function New-PowerShellRunspace {
        param(
            [System.Management.Automation.Runspaces.RunspacePool]$Pool,
            [scriptblock]$ScriptBlock,
            [PSCustomObject]$Session,
            [object[]]$Arguments
        )
        
        $runspace = [PowerShell]::Create()
        $runspace.AddScript($ScriptBlock) > $null
        $runspace.AddArgument($Session) > $null
        foreach($argument in $Arguments) {
            $runspace.AddArgument($argument) > $null
        }
        $runspace.RunspacePool = $pool

        $runspace
    }

    $sourceScript = {
        param(
            $Session,
            [string]$RootId,
            [string]$ItemIdListString
        )

        $script = {
            $itemIdList = $itemIdListString.Split("|".ToCharArray(), [System.StringSplitOptions]::RemoveEmptyEntries)
            try {
                $bulkInstallerAssemblyBytes = [System.Convert]::FromBase64String($bulkInstallerAssemblyBase64)
                [System.Reflection.Assembly]::Load($bulkInstallerAssemblyBytes) > $null
            } catch {
                Write-Log "Bulk import failed with errors $($Error[0].Exception)" -Log Error
            }

            $yamlItems = [Unicorn.PowerShell.BulkItemExtractor]::LoadItems($rootId, $itemIdList)
            $builder = New-Object System.Text.StringBuilder       
            foreach($yamlItem in $yamlItems) {
                $builder.Append($yamlItem) > $null
                $builder.Append('<-item->') > $null
            }
            $builder.ToString()
        }

        $scriptString = $script.ToString()
        $bulkInstallerAssemblyBase64 = "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UgNwA3kDggPRA/IDKARCBHAEGwUEgAAAAQAAAAAAAAAAAAAAAAA+CQAABAAAAAAAAAAAAAAAOQWXAQAAAAACAAEAAgAAAAAAAAAAANIRAAAAAAQAAAAAAAAAAAAAADkFYQkAAAAAAgABAAIAAAAAAAAAAAB0CQAAAAAEAAAAAAAAAAAAAAA5BRIKAAAAAA4AAAAAAAAAAAAAAAAACAkAAAAABAABAAEAAAAAAAAAAADCCwAAAAACAAEAAgAAAAAAAAAAAK8BAAAAAAQAAAAAAAAAAAAAADkFOwEAAAAABAAAAAAAAAAAAAAAOQWGBQAAAAAEAAAAAAAAAAAAAABCBZkKAAAAAAYAAgAHAAMACAAFAAkABQBZAEsBWwBgAWkAnAFpAFgCHwE+BFsAqgRZACUFAAAAPD5jX19EaXNwbGF5Q2xhc3MxM18wADw+Y19fRGlzcGxheUNsYXNzM18wADw+Y19fRGlzcGxheUNsYXNzNF8wADw+OV9fMTdfMAA8QnVpbGRTcWxJblN0YXRlbWVudD5iX18xN18wADw+OV9fMAA8TG9hZEl0ZW1zPmJfXzAAPEluZ2VzdD5iX18wAEZ1bmNgMQBOdWxsYWJsZWAxAElFbnVtZXJhYmxlYDEAVGFza2AxAElDb2xsZWN0aW9uYDEAQmxvY2tpbmdDb2xsZWN0aW9uYDEASUVudW1lcmF0b3JgMQBIYXNoU2V0YDEASUxpc3RgMQBHZXRJbnQzMgBGdW5jYDIARGljdGlvbmFyeWAyADw+OQA8TW9kdWxlPgBJRABTeXN0ZW0uSU8AU2l0ZWNvcmUuRGF0YQBTeXN0ZW0uRGF0YQBJbmdlc3RGaWVsZERhdGEAUHJvY2Vzc0lJdGVtRGF0YQBDdXN0b21TcWxJdGVtRGF0YQBJbmdlc3RJdGVtRGF0YQBJSXRlbU1ldGFkYXRhAG1zY29ybGliAGdldF9Jc0Jsb2IAPD5jAFJhaW5ib3cuU3RvcmFnZS5TYwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBnZXRfSWQAc2V0X0lkAHNldF9CbG9iSWQAZ2V0X0ZpZWxkSWQAc2V0X0ZpZWxkSWQAZmllbGRJZABnZXRfVGVtcGxhdGVJZABzZXRfVGVtcGxhdGVJZAB0ZW1wbGF0ZUlkAGdldF9CcmFuY2hJZABzZXRfQnJhbmNoSWQAZ2V0X1NlcmlhbGl6ZWRJdGVtSWQAZ2V0X1BhcmVudElkAHNldF9QYXJlbnRJZAByb290SWQAX2l0ZW1zQnlJZABSZWFkAGdldF9DdXJyZW50VGhyZWFkAEFkZABnZXRfSXNVbnZlcnNpb25lZABnZXRfSXNTaGFyZWQAZ2V0X0lzQ29tcGxldGVkAGdldF9HdWlkAEdldEd1aWQAU2V0VmVyc2lvbmVkRmllbGQAU2V0VW52ZXJzaW9uZWRGaWVsZABTZXRTaGFyZWRGaWVsZABHZXRUZW1wbGF0ZUZpZWxkADxJZD5rX19CYWNraW5nRmllbGQAPFRlbXBsYXRlSWQ+a19fQmFja2luZ0ZpZWxkADxCcmFuY2hJZD5rX19CYWNraW5nRmllbGQAPFBhcmVudElkPmtfX0JhY2tpbmdGaWVsZAA8TmFtZT5rX19CYWNraW5nRmllbGQAPERhdGFiYXNlTmFtZT5rX19CYWNraW5nRmllbGQAPERhdGFiYXNlPmtfX0JhY2tpbmdGaWVsZAA8UGF0aD5rX19CYWNraW5nRmllbGQAPFJhd1VudmVyc2lvbmVkRmllbGRzPmtfX0JhY2tpbmdGaWVsZAA8UmF3U2hhcmVkRmllbGRzPmtfX0JhY2tpbmdGaWVsZAA8UmF3VmVyc2lvbnM+a19fQmFja2luZ0ZpZWxkAGN1cnJlbnRGaWVsZABSZWFkVG9FbmQARGJDb21tYW5kAFNxbENvbW1hbmQAY29tbWFuZABBcHBlbmQAWG1sTm9kZQBSYWluYm93LlN0b3JhZ2UAZ2V0X0xhbmd1YWdlAHNldF9MYW5ndWFnZQBJSXRlbUxhbmd1YWdlAFNxbEl0ZW1MYW5ndWFnZQBsYW5ndWFnZQBBZGRSYW5nZQBUcnlUYWtlAEVudW1lcmFibGUASURpc3Bvc2FibGUAZ2V0X05hbWUAc2V0X05hbWUAZ2V0X0RhdGFiYXNlTmFtZQBzZXRfRGF0YWJhc2VOYW1lAGRhdGFiYXNlTmFtZQBBcHBlbmRMaW5lAGdldF9UeXBlAHNldF9GaWVsZFR5cGUAU3lzdGVtLkNvcmUAZ2V0X0RhdGFiYXNlAEdldERhdGFiYXNlAERpc3Bvc2UAVHJ5UGFyc2UARGVidWdnZXJCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBHdWlkQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARGVidWdnZXJCcm93c2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUZpbGVWZXJzaW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAERlYnVnZ2VyRGlzcGxheUF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQBJSXRlbUZpZWxkVmFsdWUAU3FsSXRlbUZpZWxkVmFsdWUAQWRkV2l0aFZhbHVlAFRyeUdldFZhbHVlAHZhbHVlAERlc2VyaWFsaXplAFN5c3RlbS5UaHJlYWRpbmcAQ29tcGxldGVBZGRpbmcAVW5pY29ybi5Mb2dnaW5nAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAUmFpbmJvdy5GaWx0ZXJpbmcAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcAVG9TdHJpbmcAR2V0U3RyaW5nAFN1YnN0cmluZwBMb2cAQ29uc3RydWN0U3FsQmF0Y2gAU3RvcHdhdGNoAGdldF9QYXRoAHNldF9QYXRoAHJvb3RQYXJlbnRJdGVtUGF0aABnZXRfTGVuZ3RoAFVuaW9uV2l0aABTeW5jTG9jawBTZWVrAFRhc2sAUmFpbmJvdy5Nb2RlbABTaXRlY29yZS5TZWN1cml0eU1vZGVsAFNpdGVjb3JlLktlcm5lbABpdGVtc1RvSW5zdGFsbABVbmljb3JuLlBvd2VyU2hlbGwuZGxsAFVuaWNvcm4uUG93ZXJTaGVsbABBcmd1bWVudE5vdE51bGwAU3lzdGVtLlhtbABMb2FkWG1sAFJhaW5ib3cuU3RvcmFnZS5ZYW1sAFVuaWNvcm4uUG93ZXJTaGVsbC5TcWwAVW5pY29ybi5EYXRhLkRpbGl0aGl1bS5TcWwATWVtb3J5U3RyZWFtAGdldF9JdGVtAHNldF9JdGVtAFdyaXRlU2VyaWFsaXplZEl0ZW0AUHJvY2Vzc0l0ZW0AR2V0SXRlbQB0YXJnZXRJdGVtAGl0ZW0AU3lzdGVtAENhbmNlbGxhdGlvblRva2VuAGNhbmNlbGxhdGlvblRva2VuAE9wZW4AR2V0Q2hpbGRyZW4AU2Vla09yaWdpbgBKb2luAElJdGVtVmVyc2lvbgBTcWxJdGVtVmVyc2lvbgB2ZXJzaW9uAFNpdGVjb3JlLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AUmFpbmJvdy5TdG9yYWdlLlNjLkRlc2VyaWFsaXphdGlvbgBVbmljb3JuLkRlc2VyaWFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBWYWx1ZUNvbGxlY3Rpb24AU3FsUGFyYW1ldGVyQ29sbGVjdGlvbgBDb25uZWN0aW9uU3RyaW5nU2V0dGluZ3NDb2xsZWN0aW9uAHNldF9Db25uZWN0aW9uAERiQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24AU3lzdGVtLkRhdGEuQ29tbW9uAFN0cmluZ0NvbXBhcmlzb24AVW5pY29ybgBSdW4AQ3VsdHVyZUluZm8AU3RvcABfdGVtcGxhdGVNZXRhZGF0YUxvb2t1cABTeXN0ZW0uTGlucQBnZXRfVmVyc2lvbk51bWJlcgBzZXRfVmVyc2lvbk51bWJlcgBEYkRhdGFSZWFkZXIAU3FsRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAHJlYWRlcgBTdHJpbmdCdWlsZGVyAGRlYnVnU3RhdGVtZW50QnVpbGRlcgBUZW1wbGF0ZU1hbmFnZXIAQ29uZmlndXJhdGlvbk1hbmFnZXIASUxvZ2dlcgBTaXRlY29yZUxvZ2dlcgBJRGVmYXVsdERlc2VyaWFsaXplckxvZ2dlcgBFdmVudERpc2FibGVyAFNlY3VyaXR5RGlzYWJsZXIAQnVsa0l0ZW1JbnN0YWxsZXIAU3FsUGFyYW1ldGVyAElGaWVsZEZpbHRlcgBJRW51bWVyYWJsZUZpZWxkRmlsdGVyAENyZWF0ZUZpZWxkRmlsdGVyAENvbmZpZ3VyYXRpb25GaWVsZEZpbHRlcgBmaWVsZEZpbHRlcgBmaWx0ZXIARW50ZXIAQ3JlYXRlRm9ybWF0dGVyAFlhbWxTZXJpYWxpemF0aW9uRm9ybWF0dGVyAERlZmF1bHREZXNlcmlhbGl6ZXIARXJyb3IASUZpZWxkVmFsdWVNYW5pcHVsYXRvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAC5jdG9yAEJ1bGtJdGVtRXh0cmFjdG9yAFNxbEl0ZW1FeHRyYWN0b3IALmNjdG9yAE1vbml0b3IAU2l0ZWNvcmUuRGlhZ25vc3RpY3MAU3lzdGVtLkRpYWdub3N0aWNzAHJvb3RJdGVtSWRzAGl0ZW1JZHMAZ2V0X1VudmVyc2lvbmVkRmllbGRzAGdldF9SYXdVbnZlcnNpb25lZEZpZWxkcwBnZXRfU2hhcmVkRmllbGRzAGdldF9SYXdTaGFyZWRGaWVsZHMAaWdub3JlZEZpZWxkcwBnZXRfUmF3RmllbGRzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAERlYnVnZ2luZ01vZGVzAGdldF9FeGNsdWRlcwBTaXRlY29yZS5EYXRhLkVuZ2luZXMAU2l0ZWNvcmUuRGF0YS5UZW1wbGF0ZXMAZ2V0X1ZhbHVlcwBnZXRfQ29ubmVjdGlvblN0cmluZ3MAQ29ubmVjdGlvblN0cmluZ1NldHRpbmdzAGdldF9QYXRocwA8PjRfX3RoaXMAU3lzdGVtLlRocmVhZGluZy5UYXNrcwBFcXVhbHMAU2l0ZWNvcmUuRGF0YS5JdGVtcwBMb2FkSXRlbXMARXh0cmFjdEl0ZW1zAGl0ZW1zAGdldF9WZXJzaW9ucwBnZXRfUmF3VmVyc2lvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAFNpdGVjb3JlLkRhdGEuTWFuYWdlcnMAZ2V0X1BhcmFtZXRlcnMAcGFyYW1ldGVycwBTaXRlY29yZS5EYXRhLkV2ZW50cwBDb25jYXQARm9ybWF0AGl0ZW1zVG9FeHRyYWN0AE9iamVjdABTZWxlY3QAV2FpdABFeGl0AGdldF9SZXN1bHQATmV4dFJlc3VsdABTeXN0ZW0uRGF0YS5TcWxDbGllbnQAWG1sRWxlbWVudABnZXRfRG9jdW1lbnRFbGVtZW50AEJ1aWxkU3FsSW5TdGF0ZW1lbnQAWG1sRG9jdW1lbnQAZ2V0X1BhcmVudABnZXRfQ3VycmVudABTeXN0ZW0uQ29sbGVjdGlvbnMuQ29uY3VycmVudABzZXRfTmFtZUhpbnQAZ2V0X0NvdW50AFN0YXJ0AEFzc2VydABJbmdlc3QATW92ZU5leHQAU3lzdGVtLlRleHQAc2V0X0NvbW1hbmRUZXh0AEJ1bGtVcGRhdGVDb250ZXh0AFN5bmNPcGVyYXRpb25Db250ZXh0AFJhaW5ib3cAcGFyYW1ldGVyUHJlZml4AFRvQXJyYXkARmFjdG9yeQBzZXRfUHJpb3JpdHkAVGhyZWFkUHJpb3JpdHkASXNOdWxsT3JFbXB0eQAAhmM8AGYAaQBlAGwAZABGAGkAbAB0AGUAcgAgAHQAeQBwAGUAPQAiAFIAYQBpAG4AYgBvAHcALgBGAGkAbAB0AGUAcgBpAG4AZwAuAEMAbwBuAGYAaQBnAHUAcgBhAHQAaQBvAG4ARgBpAGUAbABkAEYAaQBsAHQAZQByACwAIABSAGEAaQBuAGIAbwB3ACIAIABzAGkAbgBnAGwAZQBJAG4AcwB0AGEAbgBjAGUAPQAiAHQAcgB1AGUAIgA+AA0ACgAJAAkACQAJAAkAPABlAHgAYwBsAHUAZABlACAAZgBpAGUAbABkAEkARAA9ACIAewBCADEARQAxADYANQA2ADIALQBGADMARgA5AC0ANABEAEQARAAtADgANABDAEEALQA2AEUAMAA5ADkAOQA1ADAARQBDAEMAMAB9ACIAIABuAG8AdABlAD0AIgAnAEwAYQBzAHQAIAByAHUAbgAnACAAZgBpAGUAbABkACAAbwBuACAAUwBjAGgAZQBkAHUAbABlACAAdABlAG0AcABsAGEAdABlACAAKAB1AHMAZQBkACAAdABvACAAcgBlAGcAaQBzAHQAZQByACAAdABhAHMAawBzACkAIgAgAC8APgANAAoACQAJAAkACQAJADwAZQB4AGMAbAB1AGQAZQAgAGYAaQBlAGwAZABJAEQAPQAiAHsANQAyADgAMAA3ADUAOQA1AC0AMABGADgARgAtADQAQgAyADAALQA4AEQAMgBBAC0AQwBCADcAMQBEADIAOABDADYAMQAwADMAfQAiACAAbgBvAHQAZQA9ACIAJwBfAF8ATwB3AG4AZQByACcAIABmAGkAZQBsAGQAIABvAG4AIABTAHQAYQBuAGQAYQByAGQAIABUAGUAbQBwAGwAYQB0AGUAIgAgAC8APgANAAoACQAJAAkACQAJADwAZQB4AGMAbAB1AGQAZQAgAGYAaQBlAGwAZABJAEQAPQAiAHsARgA2AEQAOABBADYAMQBDAC0AMgBGADgANAAtADQANAAwADEALQBCAEQAMgA0AC0ANQAyAEQAMgAwADYAOAAxADcAMgBCAEMAfQAiACAAbgBvAHQAZQA9ACIAJwBfAF8ATwByAGkAZwBpAG4AYQB0AG8AcgAnACAAZgBpAGUAbABkACAAbwBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABlAG0AcABsAGEAdABlACIAIAAvAD4ADQAKAAkACQAJAAkACQA8AGUAeABjAGwAdQBkAGUAIABmAGkAZQBsAGQASQBEAD0AIgB7AEQAOQBDAEYAMQA0AEIAMQAtAEYAQQAxADYALQA0AEIAQQA2AC0AOQAyADgAOAAtAEUAOABBADEANwA0AEQANABEADUAMgAyAH0AIgAgAG4AbwB0AGUAPQAiACcAXwBfAFUAcABkAGEAdABlAGQAJwAgAGYAaQBlAGwAZAAgAG8AbgAgAFMAdABhAG4AZABhAHIAZAAgAFQAZQBtAHAAbABhAHQAZQAiACAALwA+AA0ACgAJAAkACQAJAAkAPABlAHgAYwBsAHUAZABlACAAZgBpAGUAbABkAEkARAA9ACIAewBCAEEARABEADkAQwBGADkALQA1ADMARQAwAC0ANABEADAAQwAtAEIAQwBDADAALQAyAEQANwA4ADQAQwAyADgAMgBGADYAQQB9ACIAIABuAG8AdABlAD0AIgAnAF8AXwBVAHAAZABhAHQAZQBkACAAYgB5ACcAIABmAGkAZQBsAGQAIABvAG4AIABTAHQAYQBuAGQAYQByAGQAIABUAGUAbQBwAGwAYQB0AGUAIgAgAC8APgANAAoACQAJAAkACQAJADwAZQB4AGMAbAB1AGQAZQAgAGYAaQBlAGwAZABJAEQAPQAiAHsAMAAwADEARABEADMAOQAzAC0AOQA2AEMANQAtADQAOQAwAEIALQA5ADIANABBAC0AQgAwAEYAMgA1AEMARAA5AEUARgBEADgAfQAiACAAbgBvAHQAZQA9ACIAJwBfAF8ATABvAGMAawAnACAAZgBpAGUAbABkACAAbwBuACAAUwB0AGEAbgBkAGEAcgBkACAAVABlAG0AcABsAGEAdABlACIAIAAvAD4ADQAKAAkACQAJAAkAPAAvAGYAaQBlAGwAZABGAGkAbAB0AGUAcgA+AAGDdTwAcwBlAHIAaQBhAGwAaQB6AGEAdABpAG8AbgBGAG8AcgBtAGEAdAB0AGUAcgAgAHQAeQBwAGUAPQAiAFIAYQBpAG4AYgBvAHcALgBTAHQAbwByAGEAZwBlAC4AWQBhAG0AbAAuAFkAYQBtAGwAUwBlAHIAaQBhAGwAaQB6AGEAdABpAG8AbgBGAG8AcgBtAGEAdAB0AGUAcgAsACAAUgBhAGkAbgBiAG8AdwAuAFMAdABvAHIAYQBnAGUALgBZAGEAbQBsACIAIABzAGkAbgBnAGwAZQBJAG4AcwB0AGEAbgBjAGUAPQAiAHQAcgB1AGUAIgA+AA0ACgAJAAkACQAJAAkAPABmAGkAZQBsAGQARgBvAHIAbQBhAHQAdABlAHIAIAB0AHkAcABlAD0AIgBSAGEAaQBuAGIAbwB3AC4ARgBvAHIAbQBhAHQAdABpAG4AZwAuAEYAaQBlAGwAZABGAG8AcgBtAGEAdAB0AGUAcgBzAC4ATQB1AGwAdABpAGwAaQBzAHQARgBvAHIAbQBhAHQAdABlAHIALAAgAFIAYQBpAG4AYgBvAHcAIgAgAC8APgANAAoACQAJAAkACQAJADwAZgBpAGUAbABkAEYAbwByAG0AYQB0AHQAZQByACAAdAB5AHAAZQA9ACIAUgBhAGkAbgBiAG8AdwAuAEYAbwByAG0AYQB0AHQAaQBuAGcALgBGAGkAZQBsAGQARgBvAHIAbQBhAHQAdABlAHIAcwAuAFgAbQBsAEYAaQBlAGwAZABGAG8AcgBtAGEAdAB0AGUAcgAsACAAUgBhAGkAbgBiAG8AdwAiACAALwA+AA0ACgAJAAkACQAJAAkAPABmAGkAZQBsAGQARgBvAHIAbQBhAHQAdABlAHIAIAB0AHkAcABlAD0AIgBSAGEAaQBuAGIAbwB3AC4ARgBvAHIAbQBhAHQAdABpAG4AZwAuAEYAaQBlAGwAZABGAG8AcgBtAGEAdAB0AGUAcgBzAC4AQwBoAGUAYwBrAGIAbwB4AEYAaQBlAGwAZABGAG8AcgBtAGEAdAB0AGUAcgAsACAAUgBhAGkAbgBiAG8AdwAiACAALwA+AA0ACgAJAAkACQAJADwALwBzAGUAcgBpAGEAbABpAHoAYQB0AGkAbwBuAEYAbwByAG0AYQB0AHQAZQByAD4AAA1tAGEAcwB0AGUAcgAASSgAZgByAG8AbQAgAFMAaQB0AGUAYwBvAHIAZQAgAEQAYQB0AGEAYgBhAHMAZQAgAFsARABpAGwAaQB0AGgAaQB1AG0AXQApAAAZZABhAHQAYQBiAGEAcwBlAE4AYQBtAGUAAIEhWwBEAGkAbABpAHQAaABpAHUAbQBdACAARABhAHQAYQAgAGMAbwByAHIAdQBwAHQAaQBvAG4AIABpAG4AIAB7ADAAfQA6AC8ALwB7AHsAewAxAH0AfQB9ACEAIABGAGkAZQBsAGQAIAB7AHsAewAyAH0AfQB9ACAAKABzAGgAYQByAGUAZAApACAAaABhAGQAIABhACAAdgBhAGwAdQBlACAAaQBuACAAdABoAGUAIAB2AGUAcgBzAGkAbwBuAGUAZAAgAGYAaQBlAGwAZABzACAAdABhAGIAbABlAC4AIABUAGgAZQAgAGYAaQBlAGwAZAAgAHYAYQBsAHUAZQAgAHcAaQBsAGwAIABiAGUAIABpAGcAbgBvAHIAZQBkAC4AAIEdWwBEAGkAbABpAHQAaABpAHUAbQBdACAARABhAHQAYQAgAGMAbwByAHIAdQBwAHQAaQBvAG4AIABpAG4AIAB7ADAAfQA6AC8ALwB7AHsAewAxAH0AfQB9ACEAIABGAGkAZQBsAGQAIAB7ADIAfQAgACgAcwBoAGEAcgBlAGQAKQAgAGgAYQBkACAAYQAgAHYAYQBsAHUAZQAgAGkAbgAgAHQAaABlACAAdQBuAHYAZQByAHMAaQBvAG4AZQBkACAAZgBpAGUAbABkAHMAIAB0AGEAYgBsAGUALgAgAFQAaABlACAAZgBpAGUAbABkACAAdgBhAGwAdQBlACAAdwBpAGwAbAAgAGIAZQAgAGkAZwBuAG8AcgBlAGQALgAAgSNbAEQAaQBsAGkAdABoAGkAdQBtAF0AIABEAGEAdABhACAAYwBvAHIAcgB1AHAAdABpAG8AbgAgAGkAbgAgAHsAMAB9ADoALwAvAHsAewB7ADEAfQB9AH0AIQAgAEYAaQBlAGwAZAAgAHsAMgB9ACAAKAB1AG4AdgBlAHIAcwBpAG8AbgBlAGQAKQAgAGgAYQBkACAAYQAgAHYAYQBsAHUAZQAgAGkAbgAgAHQAaABlACAAdgBlAHIAcwBpAG8AbgBlAGQAIABmAGkAZQBsAGQAcwAgAHQAYQBiAGwAZQAuACAAVABoAGUAIABmAGkAZQBsAGQAIAB2AGEAbAB1AGUAIAB3AGkAbABsACAAYgBlACAAaQBnAG4AbwByAGUAZAAuAACBHVsARABpAGwAaQB0AGgAaQB1AG0AXQAgAEQAYQB0AGEAIABjAG8AcgByAHUAcAB0AGkAbwBuACAAaQBuACAAewAwAH0AOgAvAC8AewB7AHsAMQB9AH0AfQAhACAARgBpAGUAbABkACAAewAyAH0AIAAoAHUAbgB2AGUAcgBzAGkAbwBuAGUAZAApACAAaABhAGQAIABhACAAdgBhAGwAdQBlACAAaQBuACAAdABoAGUAIABzAGgAYQByAGUAZAAgAGYAaQBlAGwAZABzACAAdABhAGIAbABlAC4AIABUAGgAZQAgAGYAaQBlAGwAZAAgAHYAYQBsAHUAZQAgAHcAaQBsAGwAIABiAGUAIABpAGcAbgBvAHIAZQBkAC4AAIEZWwBEAGkAbABpAHQAaABpAHUAbQBdACAARABhAHQAYQAgAGMAbwByAHIAdQBwAHQAaQBvAG4AIABpAG4AIAB7ADAAfQA6AC8ALwB7AHsAewAxAH0AfQB9ACEAIABGAGkAZQBsAGQAIAB7ADIAfQAgACgAdgBlAHIAcwBpAG8AbgBlAGQAKQAgAGgAYQBkACAAYQAgAHYAYQBsAHUAZQAgAGkAbgAgAHQAaABlACAAcwBoAGEAcgBlAGQAIABmAGkAZQBsAGQAcwAgAHQAYQBiAGwAZQAuACAAVABoAGUAIABmAGkAZQBsAGQAIAB2AGEAbAB1AGUAIAB3AGkAbABsACAAYgBlACAAaQBnAG4AbwByAGUAZAAuAACBI1sARABpAGwAaQB0AGgAaQB1AG0AXQAgAEQAYQB0AGEAIABjAG8AcgByAHUAcAB0AGkAbwBuACAAaQBuACAAewAwAH0AOgAvAC8AewB7AHsAMQB9AH0AfQAhACAARgBpAGUAbABkACAAewAyAH0AIAAoAHYAZQByAHMAaQBvAG4AZQBkACkAIABoAGEAZAAgAGEAIAB2AGEAbAB1AGUAIABpAG4AIAB0AGgAZQAgAHUAbgB2AGUAcgBzAGkAbwBuAGUAZAAgAGYAaQBlAGwAZABzACAAdABhAGIAbABlAC4AIABUAGgAZQAgAGYAaQBlAGwAZAAgAHYAYQBsAHUAZQAgAHcAaQBsAGwAIABiAGUAIABpAGcAbgBvAHIAZQBkAC4AAICfSQB0AGUAbQAgAHsAMAB9ACAAdwBhAHMAIABuAG8AdAAgAHIAZQBhAGQAIABiAHkAIAB0AGgAZQAgAGkAdABlAG0AIABsAG8AYQBkAGUAcgAgAGIAdQB0ACAAaABhAGQAIABmAGkAZQBsAGQAIAB7ADEAfQAgAGkAbgAgAHQAaABlACAAZgBpAGUAbABkACAAbABvAGEAZABlAHIAIQAAF3IAbwBvAHQASQB0AGUAbQBJAGQAcwAAgLtDAGEAbgBuAG8AdAAgAG0AYQBrAGUAIABhACAAcQB1AGUAcgB5ACAAZgBvAHIAIABlAG0AcAB0AHkAIAByAG8AbwB0ACAAcwBlAHQALgAgAFQAaABpAHMAIABsAGkAawBlAGwAeQAgAG0AZQBhAG4AcwAgAGEAIABwAHIAZQBkAGkAYwBhAHQAZQAgAGQAaQBkACAAbgBvAHQAIABoAGEAdgBlACAAYQBuAHkAIAByAG8AbwB0AHMALgAAA2kAAGtDAEEAUwBFACAAVwBIAEUATgAgAEYAaQBlAGwAZABJAEQAIAB7ADAAfQAgAFQASABFAE4AIAAnACcAIABFAEwAUwBFACAAVgBhAGwAdQBlACAARQBOAEQAIABBAFMAIABWAGEAbAB1AGUAAYrzDQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAASQBGACAATwBCAEoARQBDAFQAXwBJAEQAKAAnAHQAZQBtAHAAZABiAC4ALgAjAFQAZQBtAHAASQB0AGUAbQBEAGEAdABhACcAKQAgAEkAUwAgAE4ATwBUACAATgBVAEwATAAgAEQAUgBPAFAAIABUAGEAYgBsAGUAIAAjAFQAZQBtAHAASQB0AGUAbQBEAGEAdABhAA0ACgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABDAFIARQBBAFQARQAgAFQAQQBCAEwARQAgACMAVABlAG0AcABJAHQAZQBtAEQAYQB0AGEAKAANAAoACQAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEkARAAgAHUAbgBpAHEAdQBlAGkAZABlAG4AdABpAGYAaQBlAHIALAANAAoACQAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAE4AYQBtAGUAIABuAHYAYQByAGMAaABhAHIAKAAyADUANgApACwADQAKAAkAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABUAGUAbQBwAGwAYQB0AGUASQBEACAAdQBuAGkAcQB1AGUAaQBkAGUAbgB0AGkAZgBpAGUAcgAsAA0ACgAJACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATQBhAHMAdABlAHIASQBEACAAdQBuAGkAcQB1AGUAaQBkAGUAbgB0AGkAZgBpAGUAcgAsAA0ACgAJACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAUABhAHIAZQBuAHQASQBEACAAdQBuAGkAcQB1AGUAaQBkAGUAbgB0AGkAZgBpAGUAcgAsAA0ACgAJACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAASQB0AGUAbQBQAGEAdABoACAAbgB2AGEAcgBjAGgAYQByACgATQBBAFgAKQANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAApADsADQAKAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFcASQBUAEgAIABJAHQAZQBtAHMAVABhAGIAbABlACAAKABJAEQALAAgAE4AYQBtAGUALAAgAFQAZQBtAHAAbABhAHQAZQBJAEQALAAgAE0AYQBzAHQAZQByAEkARAAsACAAUABhAHIAZQBuAHQASQBEACwAIABJAHQAZQBtAFAAYQB0AGgAKQANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABBAFMADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAKAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFMARQBMAEUAQwBUACAAYgBhAHMAZQAuAEkARAAsACAAYgBhAHMAZQAuAE4AYQBtAGUALAAgAGIAYQBzAGUALgBUAGUAbQBwAGwAYQB0AGUASQBEACwAIABiAGEAcwBlAC4ATQBhAHMAdABlAHIASQBEACwAIABiAGEAcwBlAC4AUABhAHIAZQBuAHQASQBEACwAIABDAEEAUwBUACgAJwAvACcAIAArACAAYgBhAHMAZQAuAE4AYQBtAGUAIABBAFMAIABuAHYAYQByAGMAaABhAHIAKABNAEEAWAApACkAIABhAHMAIABJAHQAZQBtAFAAYQB0AGgACQAJAAkADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABGAFIATwBNACAASQB0AGUAbQBzACAAYQBzACAAYgBhAHMAZQANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFcASABFAFIARQAgAGIAYQBzAGUALgBJAEQAIAA9ACAAJwB7ADAAfQAnAAkADQAKAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAVQBOAEkATwBOACAAQQBMAEwADQAKAAkAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFMARQBMAEUAQwBUACAAYwBoAGkAbABkAC4ASQBEACwAIABjAGgAaQBsAGQALgBOAGEAbQBlACwAIABjAGgAaQBsAGQALgBUAGUAbQBwAGwAYQB0AGUASQBEACwAIABjAGgAaQBsAGQALgBNAGEAcwB0AGUAcgBJAEQALAAgAGMAaABpAGwAZAAuAFAAYQByAGUAbgB0AEkARAAsACAAQwBBAFMAVAAoAEkAdABlAG0AUABhAHQAaAAgACsAIAAnAC8AJwAgACsAIABjAGgAaQBsAGQALgBOAGEAbQBlACAAQQBTACAAbgB2AGEAcgBjAGgAYQByACgATQBBAFgAKQApAAkACQAJAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAARgBSAE8ATQAgAEkAdABlAG0AcwBUAGEAYgBsAGUAIABhAHMAIABwAGEAcgBlAG4AdAAgAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAASQBOAE4ARQBSACAASgBPAEkATgAgAEkAdABlAG0AcwAgAGEAcwAgAGMAaABpAGwAZAAgAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABPAE4AIABjAGgAaQBsAGQALgBQAGEAcgBlAG4AdABJAEQAIAA9ACAAcABhAHIAZQBuAHQALgBJAEQAIAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAApAAkADQAKAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEkATgBTAEUAUgBUACAASQBOAFQATwAgACMAVABlAG0AcABJAHQAZQBtAEQAYQB0AGEADQAKACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAUwBFAEwARQBDAFQAIAAqAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEYAUgBPAE0AIABJAHQAZQBtAHMAVABhAGIAbABlAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAFcASABFAFIARQAgAEkARAAgAHsAMQB9AA0ACgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABTAEUATABFAEMAVAAgAEkARAAsACAATgBhAG0AZQAsACAAVABlAG0AcABsAGEAdABlAEkARAAsACAATQBhAHMAdABlAHIASQBEACwAIABQAGEAcgBlAG4AdABJAEQALAAgAEkAdABlAG0AUABhAHQAaAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABGAFIATwBNACAAIwBUAGUAbQBwAEkAdABlAG0ARABhAHQAYQANAAoAAV0NAAoACQAJAAkACQBTAEUATABFAEMAVAAgAEkAdABlAG0ASQBkACwAIAAnACcAIABBAFMAIABMAGEAbgBnAHUAYQBnAGUALAAgAEYAaQBlAGwAZABJAGQALAAgAAGBJSwAIAAtADEAIABhAHMAIABWAGUAcgBzAGkAbwBuAA0ACgAJAAkACQAJAEYAUgBPAE0AIABTAGgAYQByAGUAZABGAGkAZQBsAGQAcwAgAHMADQAKAAkACQAJAAkASQBOAE4ARQBSACAASgBPAEkATgAgACMAVABlAG0AcABJAHQAZQBtAEQAYQB0AGEAIAB0ACAATwBOACAAcwAuAEkAdABlAG0ASQBkACAAPQAgAHQALgBJAEQADQAKAAkACQAJAAkAVQBOAEkATwBOACAAQQBMAEwADQAKAAkACQAJAAkAUwBFAEwARQBDAFQAIABJAHQAZQBtAEkAZAAsACAATABhAG4AZwB1AGEAZwBlACwAIABGAGkAZQBsAGQASQBkACwAIAABgS8sACAALQAxACAAYQBzACAAVgBlAHIAcwBpAG8AbgANAAoACQAJAAkACQBGAFIATwBNACAAVQBuAHYAZQByAHMAaQBvAG4AZQBkAEYAaQBlAGwAZABzACAAdQANAAoACQAJAAkACQBJAE4ATgBFAFIAIABKAE8ASQBOACAAIwBUAGUAbQBwAEkAdABlAG0ARABhAHQAYQAgAHQAIABPAE4AIAB1AC4ASQB0AGUAbQBJAGQAIAA9ACAAdAAuAEkARAANAAoACQAJAAkACQBVAE4ASQBPAE4AIABBAEwATAANAAoACQAJAAkACQBTAEUATABFAEMAVAAgAEkAdABlAG0ASQBkACwAIABMAGEAbgBnAHUAYQBnAGUALAAgAEYAaQBlAGwAZABJAGQALAAgAAGAtSwAIABWAGUAcgBzAGkAbwBuAA0ACgAJAAkACQAJAEYAUgBPAE0AIABWAGUAcgBzAGkAbwBuAGUAZABGAGkAZQBsAGQAcwAgAHYADQAKAAkACQAJAAkASQBOAE4ARQBSACAASgBPAEkATgAgACMAVABlAG0AcABJAHQAZQBtAEQAYQB0AGEAIAB0ACAATwBOACAAdgAuAEkAdABlAG0ASQBkACAAPQAgAHQALgBJAEQADQAKAABLRABFAEMATABBAFIARQAgAEAAewAwAH0AIABVAE4ASQBRAFUARQBJAEQARQBOAFQASQBGAEkARQBSACAAPQAgACcAewAxAH0AJwABCUkATgAgACgAAANAAAAHLAAgAEAAAAMpAAADLAAAAycAAQDNLGpOAlYnSLgVuC1Hf2TyAAQgAQEIAyAAAQUgAQEREQQgAQEOBCABAQIGIAEBEYChBwcDDhJJEkUFIAASgP0GIAEBEoEFBwcDDhJJEk0IIAIBEoEFEkUKBwUSTQIOElUSWQggAgESURKBCQcgAgoKEYENBiABARKBCQMgAA4UBwgVEl0BDhJpElEOAgICFRJdAQ4FAAASgRkGIAEBEYEdBRUSXQEOBhUSYQESUQcgAgIQEwAIBAABAg4FIAEBEwADIAACTQcVEhgSbRJxDhUSXQEOEhQdElEIFRJdARUSdQEVEl0BDgIdDgICHRJRCBJRCBUSeQEVEl0BDgIVEX0BFRJ1ARUSXQEOFRJ1ARUSXQEOBQABEm0OBSABEnEOBCAAEnEFIAASgSkGAAERgKkOCRUSgPkCDhGAqQUgAgEcGBoQAgIVEoC9AR4BFRKAvQEeABUSgPkCHgAeAQYKAg4RgKkNEAEBHR4AFRKAvQEeAAUKARGAqQcgAgETABFlAyAACA0VEl0BFRJ1ARUSXQEOCRUSeQEVEl0BDhEQAQIVEnUBHgAVEnkBHgARZQcKARUSXQEOCCAAFRF9ARMADRURfQEVEnUBFRJdAQ4EIAATAAUgAQERZQkVEnUBFRJdAQ4KIAEBFRKAvQETAAUgAB0TAAoHBBKAhRKAiQICBiABARKBOQkgAwECEoE9EkUJIAISURJREoFBEwcJCBKAjRKAkRKAlRJpElECAggsBw4SHAgVEl0BFRJ1AQgIAggdElEIElEIFRJ5AQgCFRF9ARUSdQEIFRJ1AQgJFRJdARUSdQEIBRUSeQEIAwoBCAkVEX0BFRJ1AQgFFRJ1AQgJBwEVEoC9ARJRBhUSXQESUQcVEl0BEoCxBxUSXQESgLUHFRJdARKAuQsVEoDNAhGAqRKA0QUAAgEcDhAHBhKA0RKA0QISgNECEoDRCCACAhMAEBMBBiABARGAqQ0AAxKA0RKA3RKA3RJtByACARMAEwEFBwMCAgIFIAARgKkHAAQODhwcHAUAAgEOHAgVEoFRARKAsRQHBxKAtQICAhUSgNUBEoC1EoC1AggVEoC9ARKAtQkgABUSgNUBEwAIFRKA1QESgLUFIAASgVUHIAICDhGBWQogABUSgK0BEoCxBiABARKBVQgVEoFRARKAtRQHBxKAuQICAhUSgNUBEoC5EoC5AggVEoC9ARKAuQgVEoDVARKAuQgVEoFRARKAuSoHFgIVEoDNAhGAqRIQEYCpDggSgLESEBKA0QICAg4SgN0CAgICAgICAgIGIAERgKkIBCABDggEIAEICAkgBAERgKkODggKFRKAzQIRgKkSEAYAAw4OHBwFIAIOCAgIAAICDhASgN0IFRGBaQERgKkLIAEBFRGBaQERgKkPBwMVEoDNAhGAqRIQEhACBQACDg4OCgcDEiAVEnUBAgIFFRJ5AQIPEAEBFRJ1AR4AFRJ5AR4AAwoBAgUVEnUBAiAHCxwCEoDlFRKA6QERgKkCHRJREoDtEoDxEoDZAh0SUQYAAgEcEAIIFRKA6QERgKkKIAAVEoC9ARGAqQUAABKBdQYgARKBeQ4GIAEBEoDtBSAAEoDZCyAAFRKBgQITABMBBAoBEhAEAAEBHBgHChKA8RKA9RKA9Q4SgPUSgPUOAgISgPEFAAIODhwGIAESgPUOBQABDh0OBiABEoD1HBEHBxwOFRJdAQ4SgPUIAhKA9QUgABKBjQcgAhKBkQ4cCgACDg4VEoC9AQ4IBwISgPUSgPUJFRKA+QIRgKkOBgoCEYCpDgUHARGAqQYAAw4ODg4It3pcVhk04IkIsD9ffxHVCjoEBhGAqQIGDgkGFRKArQESgLEJBhUSgK0BEoC1CQYVEoCtARKAuQIGHAsGFRKAzQIRgKkSEAwGFRKAzQIRgKkSgNEDBhJtBwYVEmEBElEDBhFlCgYVEnkBFRJdAQ4GBhUSeQEIAwYSFAQGEoDZAwYSJAoGFRKA+QIRgKkOBAAAEkUGAAESTRJFBQABDhJRDwACFRJdAQ4VEmEBElERZQcAAh0ODh0OBQABAhJRCwACCBUSYQESURFlBgABCB0SUQogABUSgL0BEoDBCiAAFRKAvQESgMUKIAAVEoC9ARKAyQkgABUSgL0BElEKIAAVEoCtARKAtQogABUSgK0BEoC5BCAAEm0LIAISgNERgKkRgKkKIAQCEhASgLEIDgogBAISEA4IEoCxBiABAhKA2QcgAgESgNkOByACAhKA2Q4QIAQdElERgKkOHRGAqRKA4RAgAxKA8RGAqR0RgKkdEYCpECAEEoD1HRGAqRKA8Q4SgPUJIAESgPUdEYCpByAAFRJdAQ4DAAABBiABDhGAqQUoABGAqQMoAA4KKAAVEoC9ARKAwQooABUSgL0BEoDFCigAFRKAvQESgMkKKAAVEoCtARKAsQooABUSgK0BEoC1CigAFRKArQESgLkEKAASbQgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQAHAQAAAAAXAQASVW5pY29ybi5Qb3dlclNoZWxsAAAFAQAAAAAXAQASQ29weXJpZ2h0IMKpICAyMDIwAAApAQAkNzIzZTUxNjYtMjQ2Ni00N2VjLWFhYmQtMThkMjQzODQ3MzZlAAAMAQAHMS4wLjAuMAAATQEAHC5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC43LjIBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lFC5ORVQgRnJhbWV3b3JrIDQuNy4yBAEAAAAIAQAAAAAAAAAyAQAte05hbWV9ICh7RGF0YWJhc2VOYW1lfTo6e0lkfSkgW0RJTElUSElVTSBTUUxdAAAAAAAAAN6n2ocAAAAAAgAAAG0AAADsfgAA7GAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAABSU0RTaSB+pkd1tUu5ilL4AbxFYAEAAABDOlxXb3JrXFNwZS1Db250ZW50LU1pZ3JhdG9yXHNyY1xVbmljb3JuLlBvd2VyU2hlbGxcb2JqXERlYnVnXFVuaWNvcm4uUG93ZXJTaGVsbC5wZGIAgX8AAAAAAAAAAAAAm38AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI1/AAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYgAAAbAMAAAAAAAAAAAAAbAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBMwCAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAKgCAAABADAAMAAwADAAMAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAAAAAABOABMAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAVQBuAGkAYwBvAHIAbgAuAFAAbwB3AGUAcgBTAGgAZQBsAGwAAAAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAE4AFwABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAVQBuAGkAYwBvAHIAbgAuAFAAbwB3AGUAcgBTAGgAZQBsAGwALgBkAGwAbAAAAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIACpACAAIAAyADAAMgAwAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAABWABcAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAVQBuAGkAYwBvAHIAbgAuAFAAbwB3AGUAcgBTAGgAZQBsAGwALgBkAGwAbAAAAAAARgATAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABVAG4AaQBjAG8AcgBuAC4AUABvAHcAZQByAFMAaABlAGwAbAAAAAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAwAAACwPw
        $scriptString = "`$rootId = '$($RootId)';`$itemIdListString = '$($ItemIdListString)';`n`$bulkInstallerAssemblyBase64 = '$($bulkInstallerAssemblyBase64)';`n" + $scriptString
        $script = [scriptblock]::Create($scriptString)

        Invoke-RemoteScript -ScriptBlock $script -Session $Session -Raw
    }

    $destinationScript = {
        param(
            $Session,
            [string]$Yaml
        )

        $rainbowYaml = $Yaml

        $script = {
            $rainbowYamlBytes = [System.Convert]::FromBase64String($rainbowYamlBase64)
            $rainbowYaml = [System.Text.Encoding]::UTF8.GetString($rainbowYamlBytes)
            $rainbowItems = $rainbowYaml -split '<-item->' | Where-Object { ![string]::IsNullOrEmpty($_) } | ConvertFrom-RainbowYaml

            $totalItems = $rainbowItems.Count
            $importedItems = 0
            $errorCount = 0
            $errorMessages = New-Object System.Text.StringBuilder
            try {
                $bulkInstallerAssemblyBytes = [System.Convert]::FromBase64String($bulkInstallerAssemblyBase64)
                [System.Reflection.Assembly]::Load($bulkInstallerAssemblyBytes) > $null
                $importedItems = [Unicorn.PowerShell.BulkItemInstaller]::LoadItems($rainbowItems)
            } catch {
                $errorCount++
                Write-Log "Bulk import failed with errors $($Error[0].Exception)" -Log Error
            }

            "{ TotalItems: $($totalItems), ImportedItems: $($importedItems), ErrorCount: $($errorCount), ErrorMessages: '$($errorMessages.ToString())' }"
        }

        $scriptString = $script.ToString()
        $rainbowYamlBytes = [System.Text.Encoding]::UTF8.GetBytes($rainbowYaml)
        $bulkInstallerAssemblyBase64 = "
        $scriptString = "`$rainbowYamlBase64 = '$([System.Convert]::ToBase64String($rainbowYamlBytes))';`n`$bulkInstallerAssemblyBase64 = '$($bulkInstallerAssemblyBase64)';" + $scriptString
        
        $script = [scriptblock]::Create($scriptString)

        Invoke-RemoteScript -ScriptBlock $script -Session $Session -Raw
    }

    $pushedLookup = @{}
    $pullPool = [RunspaceFactory]::CreateRunspacePool()
    $pullPool.Open()
    $pullRunspaces = [System.Collections.Generic.List[PSCustomObject]]@()
    $pushPool = [RunspaceFactory]::CreateRunspacePool()
    $pushPool.Open()
    $pushRunspaces = [System.Collections.Generic.List[PSCustomObject]]@()

    class QueueItem {
        [int]$Level
        [string]$Yaml
    }

    $treeLevels = [System.Collections.Generic.List[System.Collections.Generic.List[ShallowItem]]]@()
    $treeLevelQueue = [System.Collections.Generic.Queue[ShallowItem]]@()
    $treeLevelQueue.Enqueue($sourceTree[$RootParentId][0])
    Write-Message "- Tree Level Counts $(Get-SpecialText -Character 0x1F334)" -Hide:(!$Detailed)
    while($treeLevelQueue.Count -gt 0) {
        if($bulkCopy) {
            $currentLevelItems = [System.Collections.Generic.List[ShallowItem]]@()
            while($treeLevelQueue.Count -gt 0 -and ($currentDequeued = $treeLevelQueue.Dequeue())) {
                $currentLevelItems.Add($currentDequeued) > $null
            }
            $treeLevels.Add($currentLevelItems) > $null
            foreach($currentLevelItem in $currentLevelItems) {
                $currentLevelChildren = $sourceTree[$currentLevelItem.ItemId]
                foreach($currentLevelChild in $currentLevelChildren) {
                    $treeLevelQueue.Enqueue($currentLevelChild)
                }
            }
            Write-Message " - Level $($treeLevels.Count - 1) : $($currentLevelItems.Count)" -Hide:(!$Detailed)
        } else {
            $batchSize = 10
            $initialTreeLevelCount = $treeLevels.Count
            $allcurrentLevelItems = [System.Collections.Generic.List[ShallowItem]]@()
            $currentLevelItems = [System.Collections.Generic.List[ShallowItem]]@()
            while($treeLevelQueue.Count -gt 0 -and ($currentDequeued = $treeLevelQueue.Dequeue())) {
                $currentLevelItems.Add($currentDequeued) > $null
                $allCurrentLevelItems.Add($currentDequeued) > $null
                if($currentLevelItems.Count % $batchSize -eq 0) {
                    $treeLevels.Add($currentLevelItems) > $null
                    $currentLevelItems = [System.Collections.Generic.List[ShallowItem]]@()
                } elseif($treeLevelQueue.Count -eq 0) {
                    $treeLevels.Add($currentLevelItems) > $null
                    $currentLevelItems = [System.Collections.Generic.List[ShallowItem]]@()
                }
            }
            foreach($currentLevelItem in $allcurrentLevelItems) {
                $currentLevelChildren = $sourceTree[$currentLevelItem.ItemId]
                foreach($currentLevelChild in $currentLevelChildren) {
                    $treeLevelQueue.Enqueue($currentLevelChild)
                }
            }
            Write-Message " - Levels $($initialTreeLevelCount) to $($treeLevels.Count - 1) : $($allcurrentLevelItems.Count)" -Hide:(!$Detailed)
        }
    }

    Write-Message "Spinning up jobs to transfer content" -ForegroundColor Green
    
    $skippedCounter = 0
    $currentLevel = 0
    $processedCounter = 0
    
    $stepCount = [Math]::Max(1, [int][Math]::Round(($sourceItemsCount / 10.0)))
    if($sourceItemsCount -lt 20) {
        $stepCount = $sourceItemsCount
    }
    $processedBytes = 0

    $keepProcessing = !$WhatIfPreference
    $loopCounter = 0
    while($keepProcessing) {
        if($currentLevel -lt $treeLevels.Count -and $pullRunspaces.Count -lt 4) {
            if($currentLevel -eq 0) {
                Write-Message "[Status] Getting started"
            }
            $itemIdList = [System.Collections.Generic.List[string]]@()
            $levelItems = $treeLevels[$currentLevel]
            $pushedLookup.Add($currentLevel, [System.Collections.Generic.List[QueueItem]]@()) > $null
            foreach($levelItem in $levelItems) {
                $itemId = $levelItem.ItemId              

                if(($skipExisting -or $compareRevision) -and $skipItemsHash.Contains($itemId)) {
                    $processedCounter++
                    Write-Message "[Skip] $($itemId)" -ForegroundColor Cyan -Hide:(!$Detailed)
                    $skippedCounter++
                    if($processedCounter % $stepCount -eq 0) {
                        $percentComplete = [int][Math]::Round((($processedCounter * 100 / $sourceItemsCount))/10.0) * 10
                        if($percentComplete -ne 100) { Write-Message "[Status] $($percentComplete)% complete ($($processedCounter))" }
                    }
                } else {
                    Write-Message "[Pull] $($itemId) added to level $($currentLevel) request" -ForegroundColor Green -Hide:(!$Detailed)
                    $itemIdList.Add($itemId) > $null
                }
            }
            if($itemIdList.Count -gt 0) {           
                Write-Message "[Pull] Level $($currentLevel) with $($itemIdList.Count) item(s)" -ForegroundColor Green -Hide:(!$Detailed)
                $runspaceProps = @{
                    ScriptBlock = $sourceScript
                    Pool = $pullPool
                    Session = $SourceSession
                    Arguments = @($RootId,($itemIdList -join "|"))
                }
                $runspace = New-PowerShellRunspace @runspaceProps
                $pullRunspaces.Add([PSCustomObject]@{
                    Operation = "Pull"
                    Pipe = $runspace
                    Status = $runspace.BeginInvoke()
                    Level = $currentLevel
                    Time = [datetime]::Now
                }) > $null
            } else {
                if($bulkCopy) {
                    Write-Message "[Skip] Level $($currentLevel)" -ForegroundColor Cyan -Hide:(!$Detailed)
                } 
                if($pushedLookup.Contains($currentLevel) -and $pushedLookup[$currentLevel].Count -eq 0) {
                    $pushedLookup.Remove($currentLevel)
                }
            }
            
            $currentLevel++
        }

        $currentRunspaces = $pushRunspaces.ToArray() + $pullRunspaces.ToArray()
        foreach($currentRunspace in $currentRunspaces) {
            if(!$currentRunspace.Status.IsCompleted) { continue }

            [System.Management.Automation.PSDataCollection[PSObject]]$response = $currentRunspace.Pipe.EndInvoke($currentRunspace.Status)[0]

            if($currentRunspace.Operation -eq "Pull") {
                [System.Threading.Interlocked]::Increment([ref] $pullCounter) > $null
            } elseif ($currentRunspace.Operation -eq "Push") {
                [System.Threading.Interlocked]::Increment([ref] $pushCounter) > $null
            }
            Write-Message "[$($currentRunspace.Operation)] Level $($currentRunspace.Level) completed" -ForegroundColor Gray -Hide:(!$Detailed)
            Write-Message "- Processed in $(([datetime]::Now - $currentRunspace.Time))" -ForegroundColor Gray -Hide:(!$Detailed)

            if($currentRunspace.Operation -eq "Pull") {
                $yaml = $response.Item(0)              
                if(![string]::IsNullOrEmpty($yaml) -and [regex]::IsMatch($yaml,"^---")) {               
                    $processedBytes += [System.Text.Encoding]::UTF8.GetByteCount($yaml)
                    if($pushedLookup.Contains(($currentRunspace.Level - 1))) {
                        Write-Message "[Queue] Level $($currentRunspace.Level)" -ForegroundColor Cyan -Hide:(!$Detailed)
                        $pushedLookup[($currentRunspace.Level - 1)].Add([QueueItem]@{"Level"=$currentRunspace.Level;"Yaml"=$yaml;}) > $null
                    } else {               
                        Write-Message "[Push] Level $($currentRunspace.Level)" -ForegroundColor Gray -Hide:(!$Detailed)
                        $runspaceProps = @{
                            ScriptBlock = $destinationScript
                            Pool = $pushPool
                            Session = $DestinationSession
                            Arguments = @($yaml)
                        }
                        $runspace = New-PowerShellRunspace @runspaceProps  
                        $pushRunspaces.Add([PSCustomObject]@{
                            Operation = "Push"
                            Pipe = $runspace
                            Status = $runspace.BeginInvoke()
                            Level = $currentRunspace.Level
                            Time = [datetime]::Now
                        }) > $null
                    }
                }

                $currentRunspace.Pipe.Dispose()
                $pullRunspaces.Remove($currentRunspace) > $null
                $yaml = $null
            }

            if($currentRunspace.Operation -eq "Push") {
                if(![string]::IsNullOrEmpty($response)) {
                    $feedback = $response | ConvertFrom-Json
                    Write-Message "- Imported $($feedback.ImportedItems)/$($feedback.TotalItems)" -ForegroundColor Gray -Hide:(!$Detailed)
                    if($feedback.ImportedItems -gt 0) {
                        1..$feedback.ImportedItems | ForEach-Object { [System.Threading.Interlocked]::Increment([ref] $updateCounter) > $null }
                    }
                    if($feedback.TotalItems -gt 0) {
                        1..$feedback.TotalItems | ForEach-Object {
                            $processedCounter++
                            if($processedCounter % $stepCount -eq 0) {
                                $percentComplete = [int][Math]::Round((($processedCounter * 100 / $sourceItemsCount))/10.0) * 10
                                if($percentComplete -ne 100) { Write-Message "[Status] $($percentComplete)% complete ($($processedCounter))" }
                            }
                        }
                    }
                    if($feedback.ErrorCount -gt 0) {
                        [System.Threading.Interlocked]::Increment([ref] $errorCounter) > $null
                        Write-Message "- Errored $($feedback.ErrorCount)" -ForegroundColor Red -Hide:(!$Detailed)
                        Write-Message " - $($feedback.ErrorMessages)" -ForegroundColor Red -Hide:(!$Detailed)
                    }
                }
                
                $queuedItems = [System.Collections.Generic.List[QueueItem]]@()
                if($pushedLookup.ContainsKey($currentRunspace.Level)) {
                    $queuedItems.AddRange($pushedLookup[$currentRunspace.Level])
                    $pushedLookup.Remove($currentRunspace.Level) > $null
                    if($bulkCopy) {
                        Write-Message "[Pull] Level $($currentRunspace.Level) completed" -ForegroundColor Gray -Hide:(!$Detailed)
                    }
                }
                if($queuedItems.Count -gt 0) {
                    foreach($queuedItem in $queuedItems) {
                        $level = $queuedItem.Level
                        Write-Message "[Dequeue] Level $($level)" -ForegroundColor Cyan -Hide:(!$Detailed)
                        Write-Message "[Push] Level $($level)" -ForegroundColor Green -Hide:(!$Detailed)
                        $runspaceProps = @{
                            ScriptBlock = $destinationScript
                            Pool = $pushPool
                            Session = $DestinationSession
                            Arguments = @($queuedItem.Yaml)
                        }

                        $runspace = New-PowerShellRunspace @runspaceProps  
                        $pushRunspaces.Add([PSCustomObject]@{
                            Operation = "Push"
                            Pipe = $runspace
                            Status = $runspace.BeginInvoke()
                            Level = $level
                            Time = [datetime]::Now
                        }) > $null
                    }
                }
                
                $currentRunspace.Pipe.Dispose()
                $pushRunspaces.Remove($currentRunspace) > $null
            }

            $response = $null
            $currentRunspace = $null
        }

        Start-Sleep -Milliseconds 50
        $loopCounter++
        if($loopCounter % 1000 -eq 0) {
            [GC]::Collect()
        }
        $keepProcessing = ($currentLevel -lt $treeLevels.Count -or $pullRunspaces.Count -gt 0 -or $pushRunspaces.Count -gt 0)
    }

    if($WhatIfPreference) {
        $processedCounter = $sourceItemsCount
        $updateCounter = $sourceItemsCount - $skipItemsHash.Count
        $skippedCounter = $skipItemsHash.Count

        while($currentLevel -lt $treeLevels.Count) {
            Write-Message "[WhatIf] Level $($currentLevel)" -Hide:(!$Detailed)
            $levelItems = $treeLevels[$currentLevel]
            foreach($levelItem in $levelItems) {
                if(!$skipItemsHash.Contains($levelItem.ItemId)) {
                    Write-Message "[WhatIf] $($levelItem.ItemId) would be updated" -ForegroundColor Yellow -Hide:(!$Detailed)
                }
            }
            $currentLevel++
        }
    }

    Write-Message "[Status] 100% complete ($($processedCounter))"

    $pullPool.Close() 
    $pullPool.Dispose()
    $pullPool = $null
    $pushPool.Close() 
    $pushPool.Dispose()
    $pushPool = $null
    $removedCounter = 0
    if($RemoveNotInSource) {
        $removeItemsHash = [System.Collections.Generic.HashSet[string]]([StringComparer]::OrdinalIgnoreCase)
        $removeItemsHash.UnionWith($destinationItemsHash)
        $removeItemsHash.ExceptWith($sourceItemsHash)

        if($removeItemsHash.Count -gt 0) {
            Write-Message "- Removing items from destination not in source"
            $itemsNotInSource = $removeItemsHash -join "|"
            $removeNotInSourceScript = {
                $sd = New-Object Sitecore.SecurityModel.SecurityDisabler
                $ed = New-Object Sitecore.Data.Events.EventDisabler
                $itemsNotInSource = "{ITEM_IDS}"
                $itemsNotInSourceIds = ($itemsNotInSource).Split("|", [System.StringSplitOptions]::RemoveEmptyEntries)
                $db = Get-Database -Name "master"
                foreach($itemId in $itemsNotInSourceIds) {
                    $db.GetItem($itemId) | Remove-Item -Recurse -ErrorAction 0
                }
                $ed.Dispose() > $null
                $sd.Dispose() > $null
            }
            $removeNotInSourceScript = [scriptblock]::Create($removeNotInSourceScript.ToString().Replace("{ITEM_IDS}", $itemsNotInSource))
            if(!$WhatIfPreference) {
                Invoke-RemoteScript -ScriptBlock $removeNotInSourceScript -Session $DestinationSession -Raw
            }
            Write-Message "- Removed $($removeItemsHash.Count) item(s) from the destination"
            $removedCounter += $removeItemsHash.Count
        }
    }

    if($ClearAllCaches) {
        $clearAllCachesScript = {
            [Sitecore.Caching.CacheManager]::ClearAllCaches()
        }

        if(!$WhatIfPreference) {
            Invoke-RemoteScript -ScriptBlock $clearAllCachesScript -Session $DestinationSession -Raw
        }
        Write-Message "- Clearing all caches in the destination"
    }

    $watch.Stop()
    $totalSeconds = $watch.ElapsedMilliseconds / 1000
    Write-Message "[Done] Completed in a record $($totalSeconds) seconds! $(Get-SpecialText -Character 0x1F525)$(Get-SpecialText -Character 0x1F37B)" -ForegroundColor Green
    if($processedCounter -gt 0) {
        if($updateCounter -gt 0) {
            Write-Message " - Transferred $([Math]::Round($processedBytes / 1MB, 2)) MB of item data"
        }
        Write-Message "Processed $($processedCounter)"
        Write-Message " $(Get-SpecialText -Character 0x2714 -Fallback "-") Updated $($updateCounter)"
        Write-Message " $(Get-SpecialText -Character 0x2714 -Fallback "-") Skipped $($skippedCounter)"
        if($errorCounter -gt 0) {
            Write-Message " $(Get-SpecialText -Character 0x274C -Fallback "-") Errored $($errorCounter)"
        } else {
            Write-Message " $(Get-SpecialText -Character 0x2714 -Fallback "-") Errored $($errorCounter)"
        }
        if($RemoveNotInSource) {
            Write-Message " $(Get-SpecialText -Character 0x2714 -Fallback "-") Removed $($removedCounter)"
        }
        Write-Message " $(Get-SpecialText -Character 0x2714 -Fallback "-") Pulled $($pullCounter)"
        if($pullCounter -ne $pushCounter) {
            Write-Message " $(Get-SpecialText -Character 0x274C -Fallback "-") Pushed $($pushCounter)"
        } else {
            Write-Message " $(Get-SpecialText -Character 0x2714 -Fallback "-") Pushed $($pushCounter)"
        }
    }
}